{"name":"Slurpy","tagline":"Slurpy is a PHP wrapper for the pdftk command-line tool for working with PDF.","body":"# Slurpy\r\n\r\nSlurpy is a PHP wrapper for the [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) command-line tool\r\nfor working with PDF. This library is largely inspired by [Snappy](https://github.com/KnpLabs/snappy) from KnpLabs, \r\na library for generating images or pdf from html. Some of the Slurpy code comes directly from Snappy.\r\n\r\nIn order to use Slurpy you will have to download [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) for\r\neither Windows, Mac OSX or linux.\r\n\r\n[![Build Status](https://secure.travis-ci.org/baikunz/Slurpy.png?branch=master)](http://travis-ci.org/baikunz/Slurpy)\r\n\r\n## Installation\r\n\r\nIf you are using [composer](http://getcomposer.org) add the following lines to your `composer.json`:\r\n\r\n```json\r\n{\r\n    \"require\" :  {\r\n        \"shuble/slurpy\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\nAnd run these commands:\r\n\r\n```\r\nwget http://getcomposer.org/composer.phar\r\nphp composer.phar install\r\n```\r\n\r\nNow, just add the autoloader:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'vendor/autoload.php';\r\n```\r\n\r\nOr, if you are not using composer, require the provided autoload:\r\n```php\r\n<?php\r\n\r\nrequire 'path/to/slurpy/src/autoload.php';\r\n```\r\n\r\nThen proceed with the installation of pdftk if not already installed. Please refer to the \r\n[pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) website, and grab the installer\r\nor sources, depending on your system.\r\n\r\nThat's it, you're done.\r\n\r\n## Simple usage\r\n\r\nVisit the [pdftk documentation](http://www.pdflabs.com/docs/pdftk-man-page/) for more details\r\nabout each operations.\r\n\r\n### Create the factory\r\n\r\nSlurpy comes with a simple factory for dealing with pdftk operations in their simple forms.\r\nEach call to factory methods returns a Slurpy instance, then you just need to call the `generate`\r\nmethod on this Slurpy instance to process the operation.\r\n\r\n```php\r\n<?php\r\n\r\n// Create a new factory instance, give it your path to pdftk binary\r\n$factory = new \\Shuble\\Slurpy\\Factory('/path/to/pdftk');\r\n\r\n$slurpy = $factory->generateFdf('path/to/input.pdf', 'path/to/output.fdf');\r\n\r\n$slurpy->generate();\r\n```\r\n\r\n### Catenate PDF files\r\n\r\nThe `cat` operation assembles pages from input PDFs to create a new PDF. Use cat to merge PDF pages\r\nor to split PDF pages from documents. You can also use it to rotate PDF pages. Page order in the\r\nnew PDF is specified by the order of the inputs array.\r\n\r\n```php\r\n<?php\r\n\r\nuse Shuble\\Slurpy\\Operation\\OperationArgument\\PageRange;\r\n\r\n$inputs = array(\r\n    '/path/to/file1.pdf',\r\n    '/path/to/file2.pdf',\r\n    array(\r\n        'filepath'   => '/path/to/file3.pdf',\r\n        'password'   => 'pa$$word',\r\n        'start_page' => 1,\r\n        'end_page'   => 'end',\r\n        'qualifier'  => PageRange::QUALIFIER_ODD,\r\n        'rotation'   => PageRange::ROTATION_EAST,\r\n    )\r\n);\r\n\r\n$output = '/path/to/output.pdf';\r\n\r\n$slurpy = $factory->cat($inputs, $output);\r\n```\r\n\r\nNow, `/path/to/ouput.pdf` contains the 3 pdfs, with only odd pages rotated to east for the third pdf. \r\n\r\n### Shuffle PDF files\r\n\r\nThe `shuffle` operation collates pages from input PDFs to create a new PDF. Works like the cat\r\noperation except that it takes one page at a time from each page range to assemble the output PDF.\r\nIf one range runs out of pages, it continues with the remaining ranges. This feature was designed\r\nto help collate PDF pages after scanning paper documents.\r\n\r\n```php\r\n<?php\r\n\r\nuse Shuble\\Slurpy\\Operation\\OperationArgument\\PageRange;\r\n\r\n$inputs = array(\r\n    '/path/to/file1.pdf',\r\n    '/path/to/file2.pdf',\r\n    array(\r\n        'filepath'   => '/path/to/file3.pdf',\r\n        'password'   => 'pa$$word',\r\n        'start_page' => 1,\r\n        'end_page'   => 'end',\r\n        'qualifier'  => PageRange::QUALIFIER_ODD,\r\n        'rotation'   => PageRange::ROTATION_EAST,\r\n    )\r\n);\r\n\r\n$output = '/path/to/output.pdf';\r\n\r\n// Creates a Slurpy instance\r\n$slurpy = $factory->shuffle($inputs, $output);\r\n```\r\n\r\n### Background\r\n\r\nThe `background` operation Applies a PDF watermark to the background of a single input PDF.\r\nIt uses only the first page from the background PDF and applies it to every page of the input PDF.\r\nThis page is scaled and rotated as needed to fit the input page.\r\nIf the input PDF does not have a transparent background (such as a PDF created from page scans)\r\nthen the resulting background won’t be visible — use the stamp operation instead.\r\n\r\nYou can also pass a fourth parameter `$multi` if you want to use the multibackground operation.\r\n\r\n`multibackground` is the same as the background operation, but applies each page of the\r\nbackground PDF to the corresponding page of the input PDF. If the input PDF has more\r\npages than the stamp PDF, then the final stamp page is repeated across these remaining\r\npages in the input PDF.\r\n\r\n```php\r\n<?php\r\n\r\n$input = '/path/to/input.pdf'; // or array('filepath' => '/path/to/input.pdf', 'password' => 'S3cr3t');\r\n$background = '/path/to/background.pdf';\r\n$output = '/path/to/output.pdf';\r\n$multi = false // [Default], Or true for multibackground operation\r\n\r\n// Creates a Slurpy instance\r\n$slurpy = $factory->background($input, $background, $output, $multi);\r\n```\r\n\r\n### Burst\r\n\r\nThe `burst` operation splits a single, input PDF document into individual pages. Naming for the\r\nresulting page is specified if a printf-style format string. i.e. if you give an ouput of\r\n`page_%02d.pdf` to Slurpy, resulting pages are going to be `page_01.pdf`, `page_02.pdf` and so on.\r\n> NOTE that you may have to give `output` as a complete path such as `/path/to/pdfs/page_%04d.pdf`\r\n\r\n```php\r\n<?php\r\n\r\n$input = '/path/to/input.pdf'; // or array('filepath' => '/path/to/input.pdf', 'password' => 'S3cr3t');\r\n$output = '/path/to/folder/pg_%02d.pdf';\r\n\r\n$slurpy = $factory->burst($input, $output);\r\n```\r\n\r\n### Generate fdf\r\n\r\nThe `generateFdf` operation reads a single, input PDF file and generates an FDF file suitable for `fillForm`\r\noperation. It saves this FDF file using the output filename.\r\n\r\n```php\r\n<?php\r\n\r\n$input = '/path/to/input.pdf'; // or array('filepath' => '/path/to/input.pdf', 'password' => 'S3cr3t');\r\n$output = '/path/to/folder/output.fdf';\r\n\r\n$slurpy = $factory->generateFdf($input, $output);\r\n```\r\n\r\n### Fill form\r\n\r\nThe `fillForm` operation fills a single input PDF form with the given fdf or xfdf data file.\r\nBy default after filling the form, the ouput pdf fields remains active. You can disable the fields\r\nfrom the output pdf by giving `true` as a fourth argument which will `flatten` the resulting\r\npdf.\r\n> NOTE That Slurpy will soon be able to fill forms with simple key/value pairs as data instead of\r\nfdf or xfdf files.\r\n\r\n```php\r\n<?php\r\n\r\n$input = '/path/to/input.pdf'; // or array('filepath' => '/path/to/input.pdf', 'password' => 'S3cr3t');\r\n$data = '/path/to/data.fdf'; // or data.xfdf\r\n$output = '/path/to/folder/output.fdf';\r\n\r\n$slurpy = $factory->fillForm($input, $data, $output);\r\n\r\n// Or to flatten the resulting pdf.\r\n$slurpy = $factory->fillForm($input, $data, $output, true);\r\n```\r\n\r\n## Unit tests\r\n\r\nRun the following command:\r\n```\r\nphpunit\r\n```\r\nDone.\r\n\r\n## Credits\r\n\r\n- dorian ALKOUM - baikunz@gmail.com\r\n\r\n## License\r\n\r\nSlurpy is released under the MIT license. See the provided LICENSE file for more details.\r\n","google":"UA-40126320-1","note":"Don't delete this file! It's used internally to help with page regeneration."}